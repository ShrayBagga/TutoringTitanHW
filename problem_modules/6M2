// --- Helper Functions ---
function getRandomInt(min, max) { return Math.floor(Math.random() * (max - min + 1)) + min; }
function gcd(a, b) { return b === 0 ? a : gcd(b, a % b); }
function formatFraction(num, den) { const common = gcd(num, den); return `\\frac{${num/common}}{${den/common}}`; }
function formatAnswer(val, places=2) { return parseFloat(val.toFixed(places)).toString().replace(/\.00$/, ''); }


const problemGenerators = [
    () => {
        const n1 = getRandomInt(1, 4); const d1 = getRandomInt(5, 8);
        const n2 = getRandomInt(1, 4); const d2 = d1;
        return { problem: `Add the fractions: \\(\\frac{${n1}}{${d1}} + \\frac{${n2}}{${d2}}\\). Simplify your answer.`, answer: formatFraction(n1 + n2, d1), checkAnswer: formatAnswer((n1+n2)/d1) };
    },
    () => {
        const n1 = getRandomInt(5, 8); const d1 = getRandomInt(9, 12);
        const n2 = getRandomInt(1, 4); const d2 = d1;
        return { problem: `Subtract the fractions: \\(\\frac{${n1}}{${d1}} - \\frac{${n2}}{${d2}}\\). Simplify your answer.`, answer: formatFraction(n1 - n2, d1), checkAnswer: formatAnswer((n1-n2)/d1) };
    },
    () => {
        const n1 = getRandomInt(1, 5); const d1 = getRandomInt(2, 6);
        const n2 = getRandomInt(1, 5); const d2 = getRandomInt(2, 6);
        return { problem: `Multiply the fractions: \\(\\frac{${n1}}{${d1}} \\times \\frac{${n2}}{${d2}}\\).`, answer: formatFraction(n1 * n2, d1 * d2), checkAnswer: formatAnswer((n1*n2)/(d1*d2)) };
    },
    () => {
        const n1 = getRandomInt(1, 5); const d1 = getRandomInt(2, 6);
        const n2 = getRandomInt(1, 5); const d2 = getRandomInt(2, 6);
        return { problem: `Divide the fractions: \\(\\frac{${n1}}{${d1}} \\div \\frac{${n2}}{${d2}}\\).`, answer: formatFraction(n1 * d2, d1 * n2), checkAnswer: formatAnswer((n1*d2)/(d1*n2)) };
    },
    () => {
        const n1 = getRandomInt(1, 5); const d1 = getRandomInt(2, 4);
        const n2 = getRandomInt(1, 5); const d2 = getRandomInt(5, 8);
        const lcm = (d1 * d2) / gcd(d1, d2);
        const new_n1 = n1 * (lcm/d1);
        const new_n2 = n2 * (lcm/d2);
        return { problem: `Add with unlike denominators: \\(\\frac{${n1}}{${d1}} + \\frac{${n2}}{${d2}}\\).`, answer: formatFraction(new_n1 + new_n2, lcm), checkAnswer: formatAnswer((new_n1+new_n2)/lcm) };
    },
     () => {
        const whole = getRandomInt(2, 5);
        const num = getRandomInt(1, 4);
        const den = getRandomInt(num + 1, 8);
        return { problem: `Convert the mixed number to an improper fraction: \\(${whole}\\frac{${num}}{${den}}\\).`, answer: `\\(\\frac{${whole*den+num}}{${den}}\\)` , checkAnswer: `${whole*den+num}/${den}`};
    },
    () => {
        const num = getRandomInt(7, 15);
        const den = getRandomInt(2, 6);
        const whole = Math.floor(num/den);
        const rem = num % den;
        return { problem: `Convert the improper fraction to a mixed number: \\(\\frac{${num}}{${den}}\\).`, answer: `\\(${whole}\\frac{${rem}}{${den}}\\)` , checkAnswer: `${whole} ${rem}/${den}`};
    },
    () => {
        const d1 = getRandomInt(10, 50) / 10;
        const d2 = getRandomInt(10, 50) / 10;
        return { problem: `Add the decimals: \\(${d1} + ${d2}\\).`, answer: `\\(${formatAnswer(d1+d2)}\\)`, checkAnswer: formatAnswer(d1+d2) };
    },
    () => {
        const d1 = getRandomInt(50, 100) / 10;
        const d2 = getRandomInt(10, 49) / 10;
        return { problem: `Subtract the decimals: \\(${d1} - ${d2}\\).`, answer: `\\(${formatAnswer(d1-d2)}\\)`, checkAnswer: formatAnswer(d1-d2) };
    },
    () => {
        const d1 = getRandomInt(2, 9) / 10;
        const d2 = getRandomInt(2, 9) / 10;
        return { problem: `Multiply the decimals: \\(${d1} \\times ${d2}\\).`, answer: `\\(${formatAnswer(d1*d2)}\\)`, checkAnswer: formatAnswer(d1*d2) };
    },
    () => {
        const divisor = getRandomInt(2, 5);
        const quotient = getRandomInt(10, 20) / 10;
        const dividend = divisor * quotient;
        return { problem: `Divide the decimals: \\(${formatAnswer(dividend)} \\div ${divisor}\\).`, answer: `\\(${quotient}\\)`, checkAnswer: quotient.toString() };
    },
    () => {
        const num = getRandomInt(1, 4);
        const den = [10, 100][getRandomInt(0,1)];
        return { problem: `Convert the fraction \\(\\frac{${num}}{${den}}\\) to a decimal.`, answer: `\\(${num/den}\\)`, checkAnswer: (num/den).toString() };
    },
    () => {
        const decimal = getRandomInt(1, 9) / 10;
        const den = 10;
        const num = decimal * den;
        return { problem: `Convert the decimal \\(${decimal}\\) to a fraction.`, answer: formatFraction(num, den), checkAnswer: `${num/gcd(num,den)}/${den/gcd(num,den)}` };
    },
    () => {
        const items = getRandomInt(3, 6);
        const fracNum = 1;
        const fracDen = getRandomInt(2, 4);
        const total = items * (fracNum/fracDen);
        return { problem: `A recipe needs \\(\\frac{${fracNum}}{${fracDen}}\\) cups of flour. If you want to make \\(${items}\\) batches, how much flour do you need?`, answer: formatFraction(total * fracDen, fracDen), checkAnswer: formatAnswer(total) };
    },
    () => {
        const total = getRandomInt(10, 20);
        const numPeople = getRandomInt(3, 5);
        return { problem: `A pizza has \\(${total}\\) slices. If it's shared equally among \\(${numPeople}\\) people, how many slices does each person get as a mixed number?`, answer: `\\(${Math.floor(total/numPeople)}\\frac{${total%numPeople}}{${numPeople}}\\)`, checkAnswer: `${Math.floor(total/numPeople)} ${total%numPeople}/${numPeople}` };
    },
    () => {
        const cost = getRandomInt(25, 75) / 100;
        const quantity = getRandomInt(5, 10);
        return { problem: `One candy costs \\($${cost.toFixed(2)}\\). How much would \\(${quantity}\\) candies cost?`, answer: `\\($${formatAnswer(cost*quantity)}\\)`, checkAnswer: formatAnswer(cost*quantity) };
    },
    () => {
        const totalMoney = getRandomInt(10, 20);
        const itemCost = getRandomInt(15, 25) / 10;
        const numItems = Math.floor(totalMoney / itemCost);
        return { problem: `You have \\($${totalMoney}\\). How many notebooks can you buy if each one costs \\($${itemCost.toFixed(2)}\\)?`, answer: `\\(${numItems}\\) notebooks`, checkAnswer: numItems.toString() };
    },
    () => {
        const n1 = getRandomInt(1, 5); const d1 = 8;
        const d2 = 0.125 * n1 + 0.25;
        return { problem: `Compare the fraction and decimal using <, >, or =: \\(\\frac{${n1}}{${d1}}\\) ___ \\(${d2}\\)`, answer: `${(n1/d1) > d2 ? '>' : '<'}`, checkAnswer: `${(n1/d1) > d2 ? '>' : '<'}` };
    },
    () => {
        const num = getRandomInt(1234, 5678) / 1000;
        const rounded = Math.round(num * 100) / 100;
        return { problem: `Round the decimal \\(${num}\\) to the nearest hundredth.`, answer: `\\(${rounded}\\)`, checkAnswer: rounded.toString() };
    },
    () => {
        const whole = getRandomInt(1, 3);
        const num = getRandomInt(1, 2);
        const den = getRandomInt(3, 4);
        const mult = getRandomInt(2, 3);
        const improperNum = whole * den + num;
        const resultNum = improperNum * mult;
        return { problem: `Multiply: \\(${whole}\\frac{${num}}{${den}} \\times ${mult}\\). Give your answer as a mixed number.`, answer: `\\(${Math.floor(resultNum/den)}\\frac{${resultNum%den}}{${den}}\\)`, checkAnswer: `${Math.floor(resultNum/den)} ${resultNum%den}/${den}`};
    }
];

function generate(settings) {
    const problemType = getRandomInt(0, problemGenerators.length - 1);
    const generator = problemGenerators[problemType];
    const problemData = generator();
    return { ...problemData, hint: problemData.hint || "Remember to find common denominators for addition/subtraction." };
}

export const module = {
    topicId: 'g6_fractions_decimals',
    topicName: 'Fraction & Decimal Operations',
    generateProblem: generate
};
